# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GeoINCRA
                                 A QGIS plugin
 Georreferenciamento de Imóveis Rurais
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-13
        copyright            : (C) 2022 by Tiago Prudencio e Leandro França
        email                : contato@geoone.com.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Tiago Prudencio e Leandro França'
__date__ = '2022-02-13'
__copyright__ = '(C) 2022 by Tiago Prudencio e Leandro França'

from qgis.PyQt.QtCore import QCoreApplication,QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingException,
                       QgsFeature,
                       QgsField,
                       QgsVectorLayer,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFileDestination)
from qgis import processing
import pandas as pd


class createTemplate(QgsProcessingAlgorithm):

    VERTICE = 'VERTICE'
    LIMITE  = 'LIMITE'
    PARCELA  ='PARCELA'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return createTemplate()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'createtemplate'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Criar Arquivo ')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Example algorithm short description")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.VERTICE,
                self.tr('ICamada Vertice'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.LIMITE,
                self.tr('Camada Limite'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.PARCELA,
                self.tr('Camada Parcela'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OUTPUT,
                self.tr('Destination Arquivo'),
                self.tr('Documento de Texto (*.txt)')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        '''
        my_gpkg = self.parameterAsString(
            parameters,
            self.INPUT,
            context
        )
        if not my_gpkg:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT))

        vertice = QgsVectorLayer(my_gpkg + "|layername=" + 'vertice', 'vertice', 'ogr')
        self.limite = QgsVectorLayer(my_gpkg + "|layername=" + 'limite', 'limite', 'ogr')
        
        layers = [vertice,self.limite]
        for vlayer in layers:
            if not vlayer.isValid():
                feedback.pushInfo("Layer failed to load!")
            else:
                feedback.pushInfo('layer loading')
		'''
        vertice = self.parameterAsVectorLayer(
            parameters,
            self.VERTICE,
            context
        )

        if vertice is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.VERTICE))

        self.limite = self.parameterAsVectorLayer(
            parameters,
            self.LIMITE,
            context
        )

        if self.limite is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.LIMITE))

        self.parcela = self.parameterAsVectorLayer(
            parameters,
            self.PARCELA,
            context
        )

        if self.parcela is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.PARCELA))


        output_path = self.parameterAsString(
            parameters,
            self.OUTPUT,
            context
        )
        if not output_path:
            raise QgsProcessingException(self.invalidSourceError(parameters, self.OUTPUT))

        arq =  open(output_path,'w')
        self.writeHead(arq)


        field= QgsField( 'long', QVariant.String)
        vertice.addExpressionField('''to_dms($x ,'x',3)''', field)
        field= QgsField( 'lat', QVariant.String)
        vertice.addExpressionField('''to_dms($y ,'y',3)''',field)
        
        linhas = list()
        for feat in vertice.getFeatures():
            linha = list()
            linha.append(feat['vertice'])
            linha.append(self.fixcoord(feat['long'], 'long'))
            linha.append(str(feat['sigma_x']))
            linha.append(self.fixcoord(feat['lat'],'lat'))
            linha.append(str(feat['sigma_y']))
            linha.append(self.getZ(feat))
            linha.append(str(feat['sigma_z']))
            linha.append(feat['metodo_pos'])
            att = self.getAtt(feat)
            linha.append(att['tipo'])
            linha.append(att['cns'])
            linha.append(att['matricula'])
            linha = self.listaExchange(linha)
            linhas.append(linha)
    
        vertice.removeExpressionField(vertice.fields().indexOf('long'))
        vertice.removeExpressionField(vertice.fields().indexOf('lat'))

        head_line = ['vertice','long', 'sigma_x','lat', 'sigma_y','h', 'sigma_z','metodo_pos','tipo_limite','cns','Matrícula']
        df = pd.DataFrame(linhas, columns = head_line)
        df = df.to_csv(sep = '\t',header=None, index=False).strip('\n').split('\n')
        df_string = ''.join(df)
        
        arq.writelines(df_string)
        arq.close

        return {}

    def fixcoord(self,coord,suf):
        coord = coord.replace("°",' ')
        coord = coord.replace(r"′",' ')
        coord = coord.replace(".",',')
        coord = coord.replace(r'″',' ')
        if suf == 'long':
            coord = coord.replace('-',' ')
            coord += 'W'
        elif suf == 'lat':
            try:
                coord = coord.replace('-',' ')
                coord += 'S'
            except:
                coord = coord.replace('+',' ')
                coord += 'N'
        return coord

    def getZ(self,feat):
        try:
            return feat.geometry().asPoint().z()
        except:
            return '0'

    def getAtt (self,feat):
        att = dict()
        for feature in self.limite.getFeatures():
            if feature.geometry().intersects(feat.geometry()):
                att['tipo'] =  feature['tipo']
                att['cns'] = feature['cns']
                att['matricula'] = feature['matricula']
                break
        return(att)

    def listaExchange(self,strings):
    	new_strings  = list()
    	for string in strings:
    		new_string = str(string).replace("NULL", "")
    		new_strings.append(new_string)
    	return new_strings

    def writeHead(self,arq):
    	for feat in self.parcela.getFeatures():
	    	arq.write('Natureza do Serviço:'+ str(feat['nat_serv'])+ '\n')
	    	arq.write('Tipo Pessoa:'+ str(feat['pessoa'])+ '\n')
	    	arq.write('nome:'+ str(feat['nome'])+ '\n')
	    	arq.write('cpf:'+ str(feat['cpf_cnpj'])+ '\n')
	    	arq.write('denominação:'+ str(feat['denominacao'])+ '\n')
	    	arq.write('situação:'+ str(feat['situacao'])+ '\n')
	    	arq.write('Código do Imóvel (SNCR/INCRA):'+ str(feat['sncr'])+ '\n')
	    	arq.write('Código do cartório (CNS):'+ str(feat['cod_cartorio'])+ '\n')
	    	arq.write('Matricula:'+ str(feat['matricula'])+ '\n')
	    	arq.write('Município:'+ str(feat['municipio'])+ '\n')
	    	arq.write('UF:'+ str(feat['uf'])+ '\n')
	    	arq.write('\n\n')
